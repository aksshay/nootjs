var fs = require("fs");
var util = require("util")
var merge = require("merge");

var kernel = {

	environment: "prod",
	config: {},
	rootDirectory: null,
	container: require("nootjs/Bundle/FrameworkBundle/DependencyInjection/Container"),
	bundles: {},
	baseUrl: null,

	registerBundles: function() {
		throw "This method must be overridden";
	},

	getCacheDirectory: function() {
		return this.getRootDirectory() + "/var/cache";
	},

	getBundles: function() {
		return this.bundles;
	},

	addBundle: function(bundleName, bundleLocation) {
		this.bundles[bundleName] = require(bundleLocation);

		var bundleDirectory = bundleLocation.substr(0, bundleLocation.lastIndexOf("/"));
		this.bundles[bundleName].directory = bundleDirectory;
	},

	getBundle: function(name) {
		return this.bundles[name];
	},

	getBaseUrl: function()
	{
		return this.baseUrl;
	},

	/**
	 * Boot the kernel
	 * @param environment
	 * @param rootDirectory
     */
	boot: function(environment) {
		this.rootDirectory = process.env.NODE_PATH;

		this.environment = environment || "prod";

		this.configure(environment);
		this.registerBundles();
		this.buildContainer();

		this.container.get("nootjs.swig");

		this.container.get("router").boot();
	},

	/**
	 * Add all services to container
	 */
	buildContainer: function() {
		var services = [];

		for(var k in this.bundles) {

			var bundle = this.bundles[k];
			for(var c in bundle.configs)
			{
				var config = bundle.configs[c];
				if(config.services) {
					services = merge(services, config.services);
				}
			}
		}

		this.container.loadConfig(services);
	},

	/**
	 * Merge main config file with environment config file
	 * @param environment
     */
	configure: function(environment) {
		// TODO
		var mainConfig = require("app/config/config");
		var envConfig = require("app/config/config_" + environment);
		this.config = merge(mainConfig, envConfig);
	},

	getRootDirectory: function() {
		return this.rootDirectory;
	},

	getWebRoot: function() {
		return this.getRootDirectory() + "/public";
	},

	/**
	 * Convert request object into response object
	 * @param request
	 * @param response
	 * @returns {*}
     */
	handle: function(request, response) {

		var protocol = request.protocol || "http://";
		this.baseUrl = protocol + request.headers.host;

		var router = this.container.get("router");

		var path = request.url;
		//try {
			var matchedRoute = router.match(request.method, path);
			// No route found, try to serve static file
			// If that doesn't exist serve 404
			if(!matchedRoute) {

				// Check if asset exists
				var assetPath = this.getWebRoot() + path;
				if(fs.existsSync(assetPath) && fs.lstatSync(assetPath).isFile()) {
					response.body = fs.readFileSync(assetPath, 'utf8');
					return response;
				}

				// TODO: Custom 404
				response.statusCode = 404;
				response.headers = {
					"Content-Type": "text/plain"
				};
				response.body = "404 not found";
				return response;
			}

			// Route matched, so resolve to controller
			var controllerResolver = this.container.get("controller_resolver");
			return controllerResolver.resolve(matchedRoute, request);

/*
		} catch(exception) {
			// 500
			response.statusCode = 500;
			response.headers = {
				"Content-Type": "text/plain"
			};
			if(!this.config.framework.debug) {
				// TODO: Custom 500
				response.body = "500 Internal server error";
			} else {
				var controller = require("nootjs/bundle/swig/Controller/ErrorController");
				response = controller["errorAction"](request, exception);
			}
			return response;
		}*/

	}

};

module.exports = kernel;
