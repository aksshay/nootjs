module.exports = function(router, container) {

    this.router = router;
    this.container = container;
    this.controllers = {};

    // TODO: Remove request, create requestStack
    this.resolve = function(matchedRoute, request) {

        this.request = request;

        var path = request.url;

        // Get bundle, controller and action from controller config
        var parts = matchedRoute.controller.split(":");
        var bundleName      = parts[0];
        var controllerName  = parts[1] + "Controller";
        var actionName      = parts[2] + "Action";

        var controller = this.getController(bundleName, controllerName);

        // Get parameters/arguments
        var params = controller[actionName].toString ().match (/function\s*\w*\s*\((.*?)\)/)[1].split (/\s*,\s*/);

        var args = router.matcher.getArgs(path, matchedRoute.pattern);

        var matchedArgs = this.matchParamArgs(params, args);

        return controller[actionName].apply(controller, matchedArgs);
    }

    this.getController = function(bundleName, controllerName) {
        var controllerLocation = this.getControllerLocation(bundleName, controllerName);
        if(!this.controllers[controllerLocation]) {
            this.controllers[controllerLocation] = require(controllerLocation);
            // Make controller container aware
            this.controllers[controllerLocation].setContainer(this.container);
        }
        return this.controllers[controllerLocation];
    }

    this.getControllerLocation = function(bundleName, controllerName) {

        var kernel = this.container.get("kernel");
        var bundle = kernel.getBundle(bundleName);

        return bundle.directory + "/Controller/"+controllerName;
    }

    /**
     * Match arguments with parameters
     * @param params
     * @param args
     */
    this.matchParamArgs = function(params, args) {
        var matchedArgs = [];
        for(var i = 0; i < params.length; i++) {
            var param = params[i];
            if(param == "request") {
                matchedArgs.push(this.request);
            } else {
                matchedArgs.push(args[param]);
            }
        }

        return matchedArgs;
    }
}