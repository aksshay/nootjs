var container = {

    services: {},

    /**
     * Add a new service
     * @param key
     * @param service
     */
    add: function(key, service) {
        this.services[key] = service;
    },

    /**
     * Get service
     * Instantiate if it has not yet been instantiated
     * @param key
     * @returns {*}
     */
    get: function(key) {
        var service = this.services[key];
        this.instantiate(service);

        return service.instance;
    },

    instantiate: function(service) {
        if(service.instance != undefined) {
            return false;
        }

        var serviceClass = require(service.class);
        if(typeof serviceClass == "function") {
            service.instance = new serviceClass();
            if(service.arguments) {
                var arguments = this.parseArguments(service.arguments);
                serviceClass.apply(service.instance, arguments);
            }
        } else {
            service.instance = serviceClass;
        }

        // Calls
        if(service.calls) {
            for(var i = 0; i < service.calls.length; i++) {
                var call = service.calls[i];
                var method = call[0];

                var args = this.parseArguments(call[1]);

                if(typeof serviceClass == "function") {
                    service.instance[method].apply(service.instance, args);
                } else {
                    serviceClass[method].apply(service.instance, args);
                }
            }
        }



        return true;
    },

    /**
     * Find services by tag
     * TODO: Cache/improve speed whatever
     * @param tag
     * @returns {Array}
     */
    findByTag: function(tag) {
        var taggedServices = [];
        for(var key in this.services) {
            var service = this.services[key];
            if(service.tags && service.tags.indexOf(tag) !== false) {
                this.instantiate(service);
                taggedServices.push(service.instance);
            }
        }
        return taggedServices;
    },

    /**
     * Parse arguments for service/parameters etc.
     * @param arguments
     * @returns {Array}
     */
    parseArguments: function(arguments) {
        var parsed = [];
        for(var i = 0; i < arguments.length; i++) {
            var argument = arguments[i];
            // TODO: Parse for parameters
            if(argument.charAt(0) == "@") {
                var serviceName = argument.substr(1);
                if(serviceName == "container") {
                    parsed.push(this);
                } else {
                    parsed.push(this.get(serviceName));
                }
            } else {
                parsed.push(argument);
            }
        }
        return parsed;
    },

    /**
     * Load services from config file
     * @param services
     */
    loadConfig: function(services) {
        this.services = services;
    }
};

module.exports = container;